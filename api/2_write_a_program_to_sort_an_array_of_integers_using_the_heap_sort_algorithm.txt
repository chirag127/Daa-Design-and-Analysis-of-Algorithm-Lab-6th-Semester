############################################################

(try to answer in C) 
Write a program to sort an array of integers using the Heap Sort algorithm.


```
#include <stdio.h>
#include <stdlib.h>

// A utility function to swap two elements
void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
 
// The main function to heapify a Max Heap.
// The function assumes that everything under given root (element at index idx)
// is already heapified
void maxHeapify(int arr[], int n, int idx)
{
    int largest = idx;  // Initialize largest as root
    int left = 2*idx + 1;  // left = 2*idx + 1
    int right = 2*idx + 2;  // right = 2*idx + 2
 
    // If left child is larger than root
    if (left < n && arr[left] > arr[largest])
        largest = left;
 
    // If right child is larger than largest so far
    if (right < n && arr[right] > arr[largest])
        largest = right;
 
    // If largest is not root
    if (largest != idx)
    {
        swap(&arr[idx], &arr[largest]);
 
        // Recursively heapify the affected sub-tree
        maxHeapify(arr, n, largest);
    }
}
 
// Function to build a Max-Heap from the given array
void buildMaxHeap(int arr[], int n)
{
    // Index of last non-leaf node
    int startIdx = (n/2) - 1;
 
    // Perform reverse level order traversal from last non-leaf node and heapify each node
    for (int i = startIdx; i >= 0; i--) {
        maxHeapify(arr, n, i);
    }
}
 
// The main function to sort an array of given size
void heapSort(int arr[], int n)
{
    // Build Max Heap from the given array
    buildMaxHeap(arr, n);
 
    // Repeat following steps while heap size is greater than 1.
    // The last element in Max Heap will be the minimum element
    for (int i = n-1; i > 0; i--)
    {
        // Swap the root element with last element
        swap(&arr[0], &arr[i]);
 
        // Heapify the reduced heap
        maxHeapify(arr, i, 0);
    }
}
 
// A utility function to print the array
void printArray(int arr[], int n)
{
    for (int i=0; i<n; ++i)
        printf("%d ", arr[i]);
    printf("\n");
}
 
// Driver program to test above functions
int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr)/sizeof(arr[0]);
 
    heapSort(arr, n);
 
    printf("Sorted array is \n");
    printArray(arr, n);
 
    return 0;
}
```
