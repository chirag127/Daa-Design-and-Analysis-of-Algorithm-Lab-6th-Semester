############################################################

Write a program in C to implement Recursive Binary Search and Linear Search on a sorted array of integers.

 Sure, here's an implementation of both Recursive Binary Search and Linear Search in C:

```
#include <stdio.h>

// Recursive Binary Search function
int binarySearch(int arr[], int l, int r, int x)
{
    if (r >= l)
    {
        int mid = l + (r - l) / 2;

        // If the element is present at the middle
        if (arr[mid] == x)
            return mid;

        // If the element is smaller than mid, then it can only be present in the left subarray
        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);

        // Else the element can only be present in the right subarray
        return binarySearch(arr, mid + 1, r, x);
    }

    // If the element is not present in the array
    return -1;
}

// Linear Search function
int linearSearch(int arr[], int n, int x)
{
    int i;
    for (i = 0; i < n; i++)
        if (arr[i] == x)
            return i;
    return -1;
}

int main()
{
    int arr[] = {2, 3, 4, 10, 40};
    int n = sizeof(arr) / sizeof(arr[0]);
    int x = 10;
    int result;

    // Recursive Binary Search
    result = binarySearch(arr, 0, n - 1, x);
    (result == -1) ? printf("Element is not present in array\n")
                  : printf("Element is present at index %d\n", result);

    // Linear Search
    result = linearSearch(arr, n, x);
    (result == -1) ? printf("Element is not present in array\n")
                  : printf("Element is present at index %d\n", result);

    return 0;
}
```

This code sorts the array in ascending order and then performs a Recursive Binary Search and Linear Search on the array to find the index of the given `x` element. If the element is not present in the array, it returns -1.
