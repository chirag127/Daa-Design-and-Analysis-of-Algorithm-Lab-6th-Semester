/*
 

```
#include<stdio.h>
```
This line includes the standard input/output library in C.

```
void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 =  r - m;
    int L[n1], R[n2];
```
This function `merge` takes in 4 parameters, an integer array `arr`, and 3 integers `l`, `m`, and `r`. 
- `l` represents the left-most index of the subarray.
- `m` represents the middle index of the subarray.
- `r` represents the right-most index of the subarray.

The function then declares 3 integer variables `i`, `j`, and `k` and 2 integer variables `n1` and `n2` to store the length of two subarrays. `L` and `R` are two arrays that will store the elements of the subarrays.

```
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1+ j];
```
These two for loops copy the elements of the subarrays into the `L` and `R` arrays.

```
    i = 0; 
    j = 0; 
    k = l; 
```
These three lines initialize the variables `i`, `j`, and `k` to be used in the merging process.

```
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            arr[k] = L[i];
            i++;
        }
        else
        {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
```
This while loop performs the merging process. It compares the elements of the `L` and `R` arrays and places the smaller element in the `arr` array. The `i` and `j` variables are incremented to move to the next elements in the `L` and `R` arrays, respectively. The `k` variable is incremented to move to the next index in the `arr` array.

```
    while (i < n1)
    {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2)
    {
        arr[k] = R[j];
        j++;
        k++;
    }
}
```
These two while loops copy the remaining elements of the `L` and `R` arrays into the `arr` array.

```
void mergeSort(int arr[], int l, int r)
{
    if (l < r)
    {
        int m = l+(r-l)/2;
        mergeSort(arr, l, m);
        mergeSort(arr, m+1, r);
        merge(arr, l, m, r);
    }
}
```
This function `mergeSort` implements the merge sort algorithm. It takes in 3 parameters: an integer array `arr`, and 2 integers `l` and `r`. If the left-most index `l` is less than the right-most index `r`, the function splits the array into two subarrays and calls `mergeSort` on each subarray. The `merge` function is then called to merge the two subarrays.

```
int main()
{
    int arr[] = {12, 11, 13, 5, 6, 7};
    int arr_size = sizeof(arr)/sizeof(arr[0]);
    printf("Given array is \n");
    printArray(arr, arr_size);
    mergeSort(arr, 0, arr_size - 1);
    printf("\nSorted array is \n");
    printArray(arr, arr_size);
    return 0;
}
```
This is the main function that initializes an array `arr` with 6 elements, calculates its size, and calls the `mergeSort` function to sort the array. The sorted array is then printed.
*/
