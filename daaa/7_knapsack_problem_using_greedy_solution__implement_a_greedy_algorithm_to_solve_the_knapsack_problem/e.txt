/*
 

```
#include<bits/stdc++.h> 
```
This line includes the standard library `bits/stdc++.h` which includes all necessary C++ libraries.

```
using namespace std; 
```
The `using namespace std` line makes all the standard library names available in the code.

```
struct item{ 
    int value, weight; 
}; 
```
This line defines a structure `item` with two integer variables `value` and `weight`.

```
bool cmp(struct item a, struct item b){ 
    double r1 = (double)a.value / a.weight; 
    double r2 = (double)b.value / b.weight; 
    return r1 > r2; 
} 
```
This line defines a function `cmp` that takes two structures `a` and `b` as input and returns a boolean value. The function calculates the ratio of `value/weight` for each structure and returns `true` if the ratio of `a` is greater than `b`, else `false`.

```
double fractionalKnapsack(int W, struct item arr[], int n){ 
    sort(arr, arr + n, cmp); 
    int curWeight = 0; 
    double finalvalue = 0.0; 
    for (int i = 0; i < n; i++){ 
        if (curWeight + arr[i].weight <= W){ 
            curWeight += arr[i].weight; 
            finalvalue += arr[i].value; 
        } 
        else{ 
            int remain = W - curWeight; 
            finalvalue += arr[i].value * ((double) remain / arr[i].weight); 
            break; 
        } 
    } 
    return finalvalue; 
} 
```
This line defines a function `fractionalKnapsack` that takes three parameters: `W` (the maximum weight), `arr` (the array of structures), and `n` (the number of structures). The function sorts the structures in decreasing order of `value/weight` using the `cmp` function. The function then calculates the maximum value that can be obtained by adding structures to the knapsack one by one until the weight limit is reached. The function returns the maximum value.

```
int main(){ 
    int W = 50; 
    item arr[] = {{60, 10}, {100, 20}, {120, 30}}; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    cout << "Maximum value we can obtain = " 
         << fractionalKnapsack(W, arr, n); 
    return 0; 
} 
```
This line defines the main function. The maximum weight `W` is set to 50, and an array of structures `arr` is defined with three structures. The number of structures `n` is calculated using `sizeof`. The function `fractionalKnapsack` is called and the maximum value is printed. The program terminates with a return value of 0.
*/
