16. Network simulation using tools like Cisco Packet Tracer, NetSim, OMNeT++, NS2, NS3, etc.
/*
 

```
#include "ns3/core-module.h"
```
- This line is like telling the computer to bring in some helper tools so we can build our network.

```
int main (int argc, char *argv[])
{
  CommandLine cmd;
  cmd.Parse (argc, argv);
```
- This is the main part of the program where all the action happens. It takes in some information from the command line and uses it to build the network.

```
  NodeContainer nodes;
  nodes.Create (2);
```
- This line creates two "boxes" that will be used to build our network.

```
  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
  pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));
```
- This line sets up the "tools" that we will use to connect our two boxes. It sets the speed at which information can be sent to 5 Megabits per second and the delay to 2 milliseconds.

```
  NetDeviceContainer devices;
  devices = pointToPoint.Install (nodes);
```
- This line installs the tools on our two boxes so they can be connected.

```
  InternetStackHelper stack;
  stack.Install (nodes);
```
- This line installs the "brain" of the network on our two boxes.

```
  UdpEchoServerHelper echoServer (9);
```
- This line sets up one of our boxes to listen for messages on port 9.

```
  ApplicationContainer serverApps = echoServer.Install (nodes.Get (1));
  serverApps.Start (Seconds (1.0));
  serverApps.Stop (Seconds (10.0));
```
- This line installs the "listener" on the second box, starts it after 1 second, and stops it after 10 seconds.

```
  UdpEchoClientHelper echoClient (interfaces.GetAddress (1), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));
```
- This line sets up the first box to send a message to the second box on port 9. It sets the size of the message to 1024 bytes and tells it to send only 1 message.

```
  ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));
```
- This line installs the "sender" on the first box, starts it after 2 seconds, and stops it after 10 seconds.

```
  Simulator::Run ();
  Simulator::Destroy ();
  return 0;
}
```
- This line runs the simulation and cleans up after it's done. The program ends with a 0 to show that it was successful.
*/
